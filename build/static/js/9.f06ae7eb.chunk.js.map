{"version":3,"sources":["components/Blogs/BlogPost.tsx","components/Blogs/ShowBlog.tsx","components/Blogs/BlogContainer.tsx"],"names":["BlogPost","title","date","image","id","url","name","returnBlog","useState","preview","setPreview","data","setData","useEffect","Axios","get","then","res","htmlToText","slice","tags","options","uppercase","err","console","log","split","useContext","CurrentBlogContext","to","style","textDecoration","color","onClick","className","src","alt","ShowBlog","state","setState","blog","dataUrl","setDataUrl","context","BlogContext","windowId","Number","document","location","href","window","scrollTo","blogHeader","querySelector","classList","remove","status","blogs","filter","blog_id","blog_title","Date","blog_date","toDateString","blog_name","response","add","dangerouslySetInnerHTML","__html","BlogContainer","setBlogs","undefined","setBlog","sort","a","b","map","exact","path"],"mappings":"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","file":"static/js/9.f06ae7eb.chunk.js","sourcesContent":["import React, {useEffect, useContext, useState}from 'react'\r\nimport {history} from '../../App'\r\nimport {CurrentBlogContext} from '../../App'\r\nimport Axios from 'axios'\r\nimport {htmlToText} from 'html-to-text'\r\nimport {NavLink} from 'react-router-dom'\r\ninterface BlogPostProps {\r\n        title:string\r\n        id:number\r\n        date:string\r\n        image:string\r\n        url:string\r\n        name:string\r\n        returnBlog(data:string, image:string, title:string, date:string, blog_name:string):void\r\n}\r\n\r\nconst BlogPost: React.FC<BlogPostProps> = ({title, date, image, id, url, name, returnBlog}) => {\r\n        const [preview, setPreview] = useState<string>('')\r\n        const [data, setData] = useState(\"\")\r\n        useEffect(() => {\r\n        Axios.get(url).then(res => {\r\n                try {\r\n                        setPreview(htmlToText(res.data.slice(0, 80), {\r\n                                tags: {\r\n                                        'h1': { options: { uppercase: false }, \r\n                                 }\r\n                        }}) + \"...\")\r\n                } catch (err) {\r\n                        setPreview('')\r\n                }\r\n               \r\n                console.log(res.data.split('.')[0])\r\n                setData(res.data)\r\n        })\r\n    \r\n        })\r\n        const context = useContext(CurrentBlogContext)\r\n        const reRoute = () => {\r\n      \r\n        history.push(`/blogs/${id}`)\r\n\r\n        \r\n        }\r\n        const goToBlog = () => {\r\n                returnBlog(data, image, title, date, name)\r\n        }\r\n        return (\r\n                <NavLink to={`blogs/blog/${id}`} style={{textDecoration:\"none\", color:\"black\"}} onClick={goToBlog}>\r\n                <div className=\"blog\">\r\n                <h2  className=\"blog-title\" >{title}</h2>\r\n                \r\n                <img src={image} alt=\"used for the blog in question\" />\r\n                <div className=\"date-name\"><p>{date}</p>\r\n                <p>By {name}</p></div>\r\n                <div className=\"preview\">   \r\n                {preview}\r\n                </div>\r\n                </div>\r\n                </NavLink>\r\n\r\n                );\r\n}\r\nexport default BlogPost","import React, {useEffect, useState, useContext} from 'react'\r\nimport \"../../css/blog.scss\"\r\nimport {BlogContext} from '../../App'\r\nimport Axios from 'axios'\r\n\r\ninterface ShowBlogProps {\r\n    data:{blog:string,image:string, title:string, date:string, blog_name:string} | undefined;\r\n}\r\n\r\nconst ShowBlog: React.FC<ShowBlogProps> = ({data}) => {\r\n    const [state, setState] = useState<Partial<{blog:string,image:string, title:string, blog_date: Date; date:string, blog_name:string} | undefined>>(data)\r\n    const [dataUrl, setDataUrl] = useState<string | undefined>(data?.blog)\r\n    const context = useContext(BlogContext)\r\n    useEffect(() => {\r\n        let windowId = Number(document.location.href.split('/').slice(-1)[0])\r\n        window.scrollTo(0, 0)\r\n        let blogHeader = document.querySelector('a[href=\"/blogs\"]')\r\n        blogHeader?.classList.remove('active')\r\n        if (context?.status === \"LOADED\") {\r\n            let blog = context.blogs?.filter(blog => blog.blog_id === windowId)[0]\r\n            setState({\r\n                image:blog?.image,\r\n                title:blog?.blog_title, \r\n                date:new Date(blog?.blog_date!).toDateString(),\r\n                blog_name:blog?.name,\r\n            })\r\n            Axios.get(blog?.url!).then((response) => {\r\n                setDataUrl(response.data)\r\n            })\r\n        }\r\n        return () => {\r\n            blogHeader?.classList.add('active')\r\n        }\r\n    }, [context])\r\n        return (\r\n            <div className=\"blog-post\">\r\n                <h2 id=\"blog-title\">{state?.title}</h2>\r\n                <img src={state?.image} id=\"blog-image\" alt=\"for the blog\" />\r\n                <h3 id=\"blog-date\">{state?.date}</h3>\r\n                <h4 id=\"blog-name\">By {state?.blog_name}</h4>\r\n        <div id=\"show-blog\" dangerouslySetInnerHTML={{__html:dataUrl!}}></div>\r\n        </div>);\r\n}\r\nexport default ShowBlog;","import React, {useEffect, useState, useContext} from 'react'\r\nimport BlogPost from './BlogPost'\r\nimport \"../../css/blogs.scss\"\r\nimport {BlogContext} from '../../App'\r\nimport {Route} from 'react-router-dom'\r\nimport ShowBlog from './ShowBlog'\r\nimport { relative } from 'path'\r\ninterface BlogContainerProps {\r\n\r\n}\r\n\r\ntype Blogs = {\r\n  \r\n                blog_date: Date;\r\n                blog_id:number;\r\n                blog_title:string;\r\n                name:string;\r\n                url:string;\r\n                blog_details:string;\r\n                \r\n            \r\n}[]\r\n\r\ntype Blog = {\r\n  \r\n        blog_date: Date;\r\n        blog_id:number;\r\n        blog_title:string;\r\n        name:string;\r\n        url:string;\r\n        blog_details:string;\r\n        \r\n    \r\n}\r\nconst BlogContainer: React.FC<BlogContainerProps> = () => {\r\n        const [blogs, setBlogs] = useState<any>([])\r\n        const [url, setUrl] = useState('')\r\n        const [name, setName] = useState('')\r\n        const [blog, setBlog] = useState<{blog:string,image:string, title:string, date:string, blog_name:string} | undefined>(undefined)\r\n        let context = useContext(BlogContext)\r\n        \r\n        const returnBlog = (data:string, image:string, title:string, date:string, blog_name:string) => {\r\n                \r\n                setBlog({blog: data, image: image, title: title, date:date, blog_name})\r\n        }\r\n        useEffect(() => {\r\n                if (context?.status === \"LOADED\") {\r\n                        context.blogs?.sort((a, b) => a.blog_date < b.blog_date ?1:-1)\r\n                        setBlogs(context.blogs?.map(blog => {\r\n                                return <BlogPost key={blog.blog_id} \r\n                                title={blog.blog_title} \r\n                                url ={blog.url} \r\n                                image={blog.image} id={blog.blog_id} \r\n                                date={new Date(blog.blog_date).toDateString()}\r\n                                name={blog.name}\r\n                                returnBlog={returnBlog}/>\r\n                        }))\r\n                }\r\n        },[context])\r\n        return (\r\n        \r\n        <div >\r\n                <Route exact path=\"/blogs\">\r\n        <h1 id=\"head-blog\">Read Our Blogs</h1>\r\n        <div id=\"blog-container\">\r\n              \r\n        {blogs}\r\n\r\n        </div> \r\n        </Route>\r\n        <Route path=\"/blogs/blog/:id\">\r\n                <ShowBlog data={blog}/>\r\n        </Route>\r\n        </div>\r\n        );\r\n}\r\nexport default BlogContainer"],"sourceRoot":""}